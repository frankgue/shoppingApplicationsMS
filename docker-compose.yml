services:
  # ---------------- PostgreSQL Docker Compose Config ----------------
  postgres-order:
    image: postgres:15
    container_name: postgres-order
    environment:
      - POSTGRES_DB=order_service_db
      - POSTGRES_USER=frank
      - POSTGRES_PASSWORD=password
      - PGDATA: /data/postgres
    ports:
      - "5431:5431"
    volumes:
      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    command:
      - p 5431
    restart: unless-stopped
    networks:
      - shopping-network

  # ---------------- PostgreSQL Docker Compose Config ----------------
  postgres-inventory:
    image: postgres:15
    container_name: postgres-inventory
    environment:
      - POSTGRES_DB=inventory_service_db
      - POSTGRES_USER=frank
      - POSTGRES_PASSWORD=password
      - PGDATA: /data/postgres
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-inventory:/data/postgres
    restart: unless-stopped
    networks:
      - shopping-network

  # ---------------- MySQL Docker Compose Config ----------------
  mysql-inventory:
    image: mysql:8
    container_name: mysql-inventory
    environment:
      - MYSQL_DATABASE=inventory_service_db
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=frank
      - MYSQL_PASSWORD=password
    ports:
      - "3305:3305"
    expose:
      - "3305"
    volumes:
      - ./mysql-inventory:/data/mysql
    command: -p 3305
    restart: unless-stopped
    networks:
      - shopping-network

  # ---------------- MySQL Docker Compose Config ----------------
  mysql-order:
    image: mysql:8
    container_name: mysql-order
    environment:
      - MYSQL_DATABASE=order_service_db
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=frank
      - MYSQL_PASSWORD=password
    ports:
      - "3306:3306"
    expose:
      - "3306"
    volumes:
      - ./mysql-order:/data/mysql
    restart: unless-stopped
    networks:
      - shopping-network

  # ---------------- MongoDB Docker Compose Config ----------------
  mongo:
    image: mongo:6
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    ports:
      - "27017:27017"
    restart: unless-stopped
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db
    networks:
      - shopping-network

  # ---------------- Keycloak Docker Compose Config  ----------------
  keycloak-mysql:
    image: mysql:8
    container_name: keycloak-mysql
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=keycloak
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=keycloak
      - MYSQL_PASSWORD=password
    networks:
      - shopping-network

  # ---------------- Keycloak Docker Compose Config ----------------
  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    container_name: keycloak
    command: [ "start-dev", "--import-realm" ]
    volumes:
      - ./realms/:/opt/keycloak/data/import
    environment:
      - DB_VENDOR=mysql
      - DB_ADDR=mysql
      - DB_DATABASE=keycloak
      - DB_USER=keycloak
      - DB_PASSWORD=keycloak
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    depends_on:
      - keycloak-mysql
    networks:
      - shopping-network

  # ---------------- Kafka + Zookeeper Docker Compose Config ----------------
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - shopping-network

  kafka:
    image: obsidiandynamics/kafka
    container_name: kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka_data:/var/lib/kafka/data

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    networks:
      - shopping-network

  # ---------------- Zipkin Docker Compose Config ----------------
  zipkin:
    image: openzipkin/zipkin:2.27.0
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - shopping-network

  # ---------------- Discovery Server EUREKA Docker Compose Config ----------------
  discovery-server:
    image: docker.io/frankgue/discovery-server-service:latest
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
    networks:
      - shopping-network

  # ---------------- Product Service Docker Compose Config ----------------
  product-service:
    image: docker.io/frankgue/product-service:latest
    container_name: product-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - EUREKA_SERVER_URL=http://discovery-server:8761/eureka/
    depends_on:
      - mongo
      - discovery-server
      - api-gateway
    networks:
      - shopping-network

  # ---------------- Order Service Docker Compose Config ----------------
  order-service:
    image: docker.io/frankgue/order-service:latest
    container_name: order-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:3306/order-service
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql-order:5431/order-service
#      - EUREKA_SERVER_URL=http://discovery-server:8761/eureka/
    depends_on:
      - mysql-order
#      - postgres-order
      - kafdrop
      - kafka
      - zipkin
      - discovery-server
      - api-gateway
    networks:
      - shopping-network

  # ---------------- Inventory Service Docker Compose Config ----------------
  inventory-service:
    image: docker.io/frankgue/inventory-service:latest
    container_name: inventory-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-inventory:3306/inventory-service
    depends_on:
      - mysql-inventory
#      - postgres-inventory
      - discovery-server
      - api-gateway
    networks:
      - shopping-network

  # ---------------- Notification Service Docker Compose Config ----------------
  notification-service:
    image: docker.io/frankgue/notification-service:latest
    container_name: notification-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - kafka
      - kafdrop
      - discovery-server
      - api-gateway
    networks:
      - shopping-network

  # ---------------- Gateway Service Docker Compose Config ----------------
  api-gateway:
    image: docker.io/frankgue/api-gateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8081:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
#      - EUREKA_SERVER_URL=http://discovery-server:8761/eureka/
    depends_on:
      - zipkin
      - discovery-server
      - keycloak
#      - product-service
#      - order-service
#      - inventory-service
#      - notification-service
    networks:
      - shopping-network


#volumes:
#  kafka_data:
